<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting_starteds on MongoDB .NET Driver</title>
    <link>/mongo-csharp-driver/2.0/getting_started/</link>
    <description>Recent content in Getting_starteds on MongoDB .NET Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2015 15:36:56 +0000</lastBuildDate>
    <atom:link href="/mongo-csharp-driver/2.0/getting_started/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CRUD Operations</title>
      <link>/mongo-csharp-driver/2.0/getting_started/crud/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/crud/</guid>
      <description>

&lt;h2 id=&#34;crud-operations:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;CRUD Operations&lt;/h2&gt;

&lt;p&gt;This page is a brief overview of performing basic create, read, update, and delete (CRUD) operations with the driver.&lt;/p&gt;

&lt;p&gt;For more information about the .NET API, please refere to the &lt;a href=&#34;http://api.mongodb.org/csharp/2.0.0&#34;&gt;online API Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The rest of this document assumes the following class and collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Person
{
    public ObjectId Id { get; set; }

    public string Name { get; set; }

    public int Age { get; set; }

    public string Profession { get; set; }
}

var collection = db.GetCollection&amp;lt;Entity&amp;gt;(&amp;quot;entities&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;inserting-a-document:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Inserting a document&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var jane = new Person { Name = &amp;quot;Jane McJane&amp;quot;, Age = 24, Profession = &amp;quot;Hacker&amp;quot; };

await collection.InsertOneAsync(entity);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After insertion, the person&amp;rsquo;s &lt;code&gt;Id&lt;/code&gt; property will contain the automatically generated identifier. For more on id generation, see the &lt;a href=&#34;No page found with path or logical name &#34;reference/bson/idgenerators.md&#34;.
&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;finding-a-document:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Finding a Document&lt;/h3&gt;

&lt;p&gt;To find all the people who are younger than 42, the following variations are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var people = await collection.Find(x =&amp;gt; x.Age &amp;lt; 42).ToListAsync();

// or

var filter = Builders&amp;lt;Person&amp;gt;.Filter.Lt(x =&amp;gt; x.Age, 42);
var people = await collection.Find(filter).ToListAsync();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lambda expressions get translated into the bson filter &lt;code&gt;{ Age: { $lt: 42 } }&lt;/code&gt;. Not everything is support via expression trees, but most (if not all) the common operations are. See the &lt;a href=&#34;No page found with path or logical name &#34;reference/driver/filters.md&#34;.
&#34;&gt;reference guide&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;updating:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Updating&lt;/h3&gt;

&lt;p&gt;To update a document, there are 2 methods for doing so. First, you can update specific fields. For instance, I&amp;rsquo;d like to change Tom&amp;rsquo;s profession to &amp;ldquo;Musician&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var update = Builders&amp;lt;Person&amp;gt;.Update.Set(x =&amp;gt; x.Profession, &amp;quot;Musician&amp;quot;);
var result = await collection.UpdateOneAsync(x =&amp;gt; x.Name == &amp;quot;Tom&amp;quot;, update);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate a filter of &lt;code&gt;{ Name: &amp;quot;Tom&amp;quot; }&lt;/code&gt; and an update statement of &lt;code&gt;{ $set: { Profession: &amp;quot;Musician&amp;quot; } }&lt;/code&gt;. Since we didn&amp;rsquo;t use an identifier in the query, then if there is more than one person named &amp;ldquo;Tom&amp;rdquo;, one of them will get updated.&lt;/p&gt;

&lt;p&gt;If we simply want to replace a person&amp;rsquo;s document completely, we can use the &lt;code&gt;ReplaceOneAsync&lt;/code&gt; method. Assuming Tom&amp;rsquo;s _id value is &amp;ldquo;550c4aa98e59471bddf68eef&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var tom = await collection.Find(x =&amp;gt; x.Id == ObjectId.Parse(&amp;quot;550c4aa98e59471bddf68eef&amp;quot;)).SingleAsync();
tom.Name = &amp;quot;Thomas&amp;quot;;
tom.Age = 43;
tom.Profession = &amp;quot;Hacker&amp;quot;;
var result = await collection.ReplaceOneAsync(x =&amp;gt; x.Id == tom.Id, tom);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Identifiers in MongoDB are immutable, so you can&amp;rsquo;t replace a document with another one where the identifier is different.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;deleting:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Deleting&lt;/h3&gt;

&lt;p&gt;Finally, to delete Tom, we can do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = await collection.DeleteOne(x =&amp;gt; x.Id == tom.Id);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Connecting</title>
      <link>/mongo-csharp-driver/2.0/getting_started/connecting/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/connecting/</guid>
      <description>

&lt;h2 id=&#34;connecting:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Connecting&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;MongoClient&lt;/code&gt; instance is the root object to handle connecting to the database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var client = new MongoClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will connect to a mongod or mongos running on localhost port 27017. If you&amp;rsquo;d like to use a remote host, you can provide a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;connection string&lt;/a&gt; to the constructor or construct a &lt;code&gt;MongoClientSettings&lt;/code&gt; object and pass it in. To see more about connecting with a client, see the &lt;a href=&#34;No page found with path or logical name &#34;reference/driver/connecting.md&#34;.
&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;database:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Database&lt;/h3&gt;

&lt;p&gt;From here, you&amp;rsquo;ll want to retrieve an &lt;code&gt;IMongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var db = client.GetDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will retrieve a reference to the database named &amp;ldquo;test&amp;rdquo; in MongoDB. There is no need to create the database before hand. It will get created upon first use. If you use more than one database, call GetDatabase again with a different name.&lt;/p&gt;

&lt;h3 id=&#34;collection:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Collection&lt;/h3&gt;

&lt;p&gt;From here, you&amp;rsquo;ll need to retrieve a reference to an &lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt; instance, where &lt;code&gt;TDocument&lt;/code&gt; is the type of document with which to work. Most likely, this will be either a &lt;code&gt;BsonDocument&lt;/code&gt; or a custom entity of your own. You would use the BsonDocument object model when the data you are working with is so free form that it would be difficult or impossible to define domain classes for it or because you want to handle the mapping yourself. Because it is so much easier to work with your own domain classes this quick-start will assume that you are going to do that.&lt;/p&gt;

&lt;p&gt;One constraint on your custom entity is that it must contain an &lt;code&gt;Id&lt;/code&gt; field. You can read more about customizing entities in the &lt;a href=&#34;No page found with path or logical name &#34;reference/bson/mapping.md&#34;.
&#34;&gt;reference guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider the following class definition:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Entity
{
    public ObjectId Id { get; set; }

    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can get a reference to a collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var collection = db.GetCollection&amp;lt;Entity&amp;gt;(&amp;quot;entities&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, as with database, there is no need to create a collection before it&amp;rsquo;s use. It will get created automatically.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-csharp-driver/2.0/getting_started/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/</guid>
      <description>

&lt;h2 id=&#34;getting-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;This quick-start privides just enough information to get you started using the .NET driver. After you have gotten started, you can refer to the rest of the documenation for more information.&lt;/p&gt;

&lt;h3 id=&#34;system-requirements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;System Requirements&lt;/h3&gt;

&lt;p&gt;.NET 4.5 or later is required to utilize the libraries. It has also been tested with Mono 3.10 on OSX.&lt;/p&gt;

&lt;h4 id=&#34;core-clr:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Core CLR&lt;/h4&gt;

&lt;p&gt;As the Core CLR hasn&amp;rsquo;t shipped yet, we don&amp;rsquo;t yet have support for it. We run compatibility reports using the &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/1177943e-cfb7-4822-a8a6-e56c7905292b&#34;&gt;.NET Portability Analyzer&lt;/a&gt; to mitigate the need to make public API changes when we are ready to release compatible assemblies.&lt;/p&gt;

&lt;h3 id=&#34;nuget-installation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Nuget Installation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nuget.org/&#34;&gt;Nuget&lt;/a&gt; is the simplest way to get the driver. There are 4 packages available on nuget.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/mongodb.driver&#34;&gt;MongoDB.Driver&lt;/a&gt;: The new driver. It is mostly void of any legacy code and should be used for all new projects. More documentation can be found in the &lt;a href=&#34;No page found with path or logical name &#34;reference/driver/index.md&#34;.
&#34;&gt;reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/mongodb.driver.core&#34;&gt;MongoDB.Driver.Core&lt;/a&gt;: The core of the driver and is a dependency of MongoDB.Driver. You will probably not use this package directly. More documentation can be found in the &lt;a href=&#34;No page found with path or logical name &#34;reference/driver_core/index.md&#34;.
&#34;&gt;reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/mongodb.bson&#34;&gt;MongoDB.Bson&lt;/a&gt;: The bson layer. It is a dependency of MongoDB.Driver.Core. It may be used by itself. More documentation can be found in the &lt;a href=&#34;No page found with path or logical name &#34;reference/bson/index.md&#34;.
&#34;&gt;reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/mongocsharpdriver&#34;&gt;mongocsharpdriver&lt;/a&gt;: The compatibility layer for those upgrading from our 1.x series. This should not be used for new projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;binary-installation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Binary Installation&lt;/h3&gt;

&lt;p&gt;Alternatively, if you&amp;rsquo;d like to pull down binaries, you can do that from the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/releases&#34;&gt;releases section&lt;/a&gt; on our &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver&#34;&gt;github repo&lt;/a&gt; contains zip files for each release.&lt;/p&gt;

&lt;p&gt;The references necessary correlate strongly with the package names above. For new applications, you&amp;rsquo;ll add the &lt;code&gt;MongoDB.Driver.dll&lt;/code&gt;, &lt;code&gt;MongoDB.Driver.Core.dll&lt;/code&gt;, and &lt;code&gt;MongoDB.Bson.dll&lt;/code&gt;. For those working with legacy applications, you&amp;rsquo;ll also want to add a reference to &lt;code&gt;MongoDB.Driver.Legacy.dll&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>