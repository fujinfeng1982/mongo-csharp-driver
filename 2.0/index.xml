<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB .NET Driver</title>
    <link>/mongo-csharp-driver/2.0/</link>
    <description>Recent content on MongoDB .NET Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Mar 2015 16:56:14 +0000</lastBuildDate>
    <atom:link href="/mongo-csharp-driver/2.0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Issues &amp; Help</title>
      <link>/mongo-csharp-driver/2.0/issues_help/</link>
      <pubDate>Wed, 18 Mar 2015 16:56:14 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/issues_help/</guid>
      <description>

&lt;h2 id=&#34;issues-help:5994e935a64c55120f0d30dc6628456b&#34;&gt;Issues &amp;amp; Help&lt;/h2&gt;

&lt;p&gt;Questions and Bug reports can be submitted a variety of ways.&lt;/p&gt;

&lt;h3 id=&#34;questions:5994e935a64c55120f0d30dc6628456b&#34;&gt;Questions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/mongodb-user&#34;&gt;Discussion Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/mongodb&#34;&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bug-reports:5994e935a64c55120f0d30dc6628456b&#34;&gt;Bug Reports&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP&#34;&gt;JIRA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If youâ€™ve identified a security vulnerability in a driver or any other MongoDB project, please report it according to the &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/create-a-vulnerability-report&#34;&gt;instructions here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-csharp-driver/2.0/getting_started/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/</guid>
      <description>

&lt;h2 id=&#34;getting-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;This quick-start privides just enough information to get you started using the .NET driver. After you have gotten started, you can refer to the rest of the documenation for more information.&lt;/p&gt;

&lt;h3 id=&#34;system-requirements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;System Requirements&lt;/h3&gt;

&lt;p&gt;.NET 4.5 or later is required to utilize the libraries. It has also been tested with Mono 3.10 on OSX.&lt;/p&gt;

&lt;h4 id=&#34;core-clr:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Core CLR&lt;/h4&gt;

&lt;p&gt;As the Core CLR hasn&amp;rsquo;t shipped yet, we don&amp;rsquo;t yet have support for it. We run compatibility reports using the &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/1177943e-cfb7-4822-a8a6-e56c7905292b&#34;&gt;.NET Portability Analyzer&lt;/a&gt; to mitigate the need to make public API changes when we are ready to release compatible assemblies.&lt;/p&gt;

&lt;h3 id=&#34;nuget-installation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Nuget Installation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nuget.org/&#34;&gt;Nuget&lt;/a&gt; is the simplest way to get the driver. There are 4 packages available on nuget.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/mongodb.driver&#34;&gt;MongoDB.Driver&lt;/a&gt;: The new driver. It is mostly void of any legacy code and should be used for all new projects. More documentation can be found in the &lt;a href=&#34;No page found with path or logical name &#34;reference/driver/index.md&#34;.
&#34;&gt;reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/mongodb.driver.core&#34;&gt;MongoDB.Driver.Core&lt;/a&gt;: The core of the driver and is a dependency of MongoDB.Driver. You will probably not use this package directly. More documentation can be found in the &lt;a href=&#34;No page found with path or logical name &#34;reference/driver_core/index.md&#34;.
&#34;&gt;reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/mongodb.bson&#34;&gt;MongoDB.Bson&lt;/a&gt;: The bson layer. It is a dependency of MongoDB.Driver.Core. It may be used by itself. More documentation can be found in the &lt;a href=&#34;No page found with path or logical name &#34;reference/bson/index.md&#34;.
&#34;&gt;reference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/mongocsharpdriver&#34;&gt;mongocsharpdriver&lt;/a&gt;: The compatibility layer for those upgrading from our 1.x series. This should not be used for new projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;binary-installation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Binary Installation&lt;/h3&gt;

&lt;p&gt;Alternatively, if you&amp;rsquo;d like to pull down binaries, you can do that from the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/releases&#34;&gt;releases section&lt;/a&gt; on our &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver&#34;&gt;github repo&lt;/a&gt; contains zip files for each release.&lt;/p&gt;

&lt;p&gt;The references necessary correlate strongly with the package names above. For new applications, you&amp;rsquo;ll add the &lt;code&gt;MongoDB.Driver.dll&lt;/code&gt;, &lt;code&gt;MongoDB.Driver.Core.dll&lt;/code&gt;, and &lt;code&gt;MongoDB.Bson.dll&lt;/code&gt;. For those working with legacy applications, you&amp;rsquo;ll also want to add a reference to &lt;code&gt;MongoDB.Driver.Legacy.dll&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connecting</title>
      <link>/mongo-csharp-driver/2.0/getting_started/connecting/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/connecting/</guid>
      <description>

&lt;h2 id=&#34;connecting:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Connecting&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;MongoClient&lt;/code&gt; instance is the root object to handle connecting to the database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var client = new MongoClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will connect to a mongod or mongos running on localhost port 27017. If you&amp;rsquo;d like to use a remote host, you can provide a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;connection string&lt;/a&gt; to the constructor or construct a &lt;code&gt;MongoClientSettings&lt;/code&gt; object and pass it in. To see more about connecting with a client, see the &lt;a href=&#34;No page found with path or logical name &#34;reference/driver/connecting.md&#34;.
&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;database:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Database&lt;/h3&gt;

&lt;p&gt;From here, you&amp;rsquo;ll want to retrieve an &lt;code&gt;IMongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var db = client.GetDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will retrieve a reference to the database named &amp;ldquo;test&amp;rdquo; in MongoDB. There is no need to create the database before hand. It will get created upon first use. If you use more than one database, call GetDatabase again with a different name.&lt;/p&gt;

&lt;h3 id=&#34;collection:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Collection&lt;/h3&gt;

&lt;p&gt;From here, you&amp;rsquo;ll need to retrieve a reference to an &lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt; instance, where &lt;code&gt;TDocument&lt;/code&gt; is the type of document with which to work. Most likely, this will be either a &lt;code&gt;BsonDocument&lt;/code&gt; or a custom entity of your own. You would use the BsonDocument object model when the data you are working with is so free form that it would be difficult or impossible to define domain classes for it or because you want to handle the mapping yourself. Because it is so much easier to work with your own domain classes this quick-start will assume that you are going to do that.&lt;/p&gt;

&lt;p&gt;One constraint on your custom entity is that it must contain an &lt;code&gt;Id&lt;/code&gt; field. You can read more about customizing entities in the &lt;a href=&#34;No page found with path or logical name &#34;reference/bson/mapping.md&#34;.
&#34;&gt;reference guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider the following class definition:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Entity
{
    public ObjectId Id { get; set; }

    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can get a reference to a collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var collection = db.GetCollection&amp;lt;Entity&amp;gt;(&amp;quot;entities&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, as with database, there is no need to create a collection before it&amp;rsquo;s use. It will get created automatically.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/mongo-csharp-driver/2.0/getting_started/crud/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/crud/</guid>
      <description>

&lt;h2 id=&#34;crud-operations:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;CRUD Operations&lt;/h2&gt;

&lt;p&gt;This page is a brief overview of performing basic create, read, update, and delete (CRUD) operations with the driver.&lt;/p&gt;

&lt;p&gt;For more information about the .NET API, please refere to the &lt;a href=&#34;http://api.mongodb.org/csharp/2.0.0&#34;&gt;online API Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The rest of this document assumes the following class and collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Person
{
    public ObjectId Id { get; set; }

    public string Name { get; set; }

    public int Age { get; set; }

    public string Profession { get; set; }
}

var collection = db.GetCollection&amp;lt;Entity&amp;gt;(&amp;quot;entities&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;inserting-a-document:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Inserting a document&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var jane = new Person { Name = &amp;quot;Jane McJane&amp;quot;, Age = 24, Profession = &amp;quot;Hacker&amp;quot; };

await collection.InsertOneAsync(entity);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After insertion, the person&amp;rsquo;s &lt;code&gt;Id&lt;/code&gt; property will contain the automatically generated identifier. For more on id generation, see the &lt;a href=&#34;No page found with path or logical name &#34;reference/bson/idgenerators.md&#34;.
&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;finding-a-document:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Finding a Document&lt;/h3&gt;

&lt;p&gt;To find all the people who are younger than 42, the following variations are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var people = await collection.Find(x =&amp;gt; x.Age &amp;lt; 42).ToListAsync();

// or

var filter = Builders&amp;lt;Person&amp;gt;.Filter.Lt(x =&amp;gt; x.Age, 42);
var people = await collection.Find(filter).ToListAsync();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lambda expressions get translated into the bson filter &lt;code&gt;{ Age: { $lt: 42 } }&lt;/code&gt;. Not everything is support via expression trees, but most (if not all) the common operations are. See the &lt;a href=&#34;No page found with path or logical name &#34;reference/driver/filters.md&#34;.
&#34;&gt;reference guide&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;updating:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Updating&lt;/h3&gt;

&lt;p&gt;To update a document, there are 2 methods for doing so. First, you can update specific fields. For instance, I&amp;rsquo;d like to change Tom&amp;rsquo;s profession to &amp;ldquo;Musician&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var update = Builders&amp;lt;Person&amp;gt;.Update.Set(x =&amp;gt; x.Profession, &amp;quot;Musician&amp;quot;);
var result = await collection.UpdateOneAsync(x =&amp;gt; x.Name == &amp;quot;Tom&amp;quot;, update);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate a filter of &lt;code&gt;{ Name: &amp;quot;Tom&amp;quot; }&lt;/code&gt; and an update statement of &lt;code&gt;{ $set: { Profession: &amp;quot;Musician&amp;quot; } }&lt;/code&gt;. Since we didn&amp;rsquo;t use an identifier in the query, then if there is more than one person named &amp;ldquo;Tom&amp;rdquo;, one of them will get updated.&lt;/p&gt;

&lt;p&gt;If we simply want to replace a person&amp;rsquo;s document completely, we can use the &lt;code&gt;ReplaceOneAsync&lt;/code&gt; method. Assuming Tom&amp;rsquo;s _id value is &amp;ldquo;550c4aa98e59471bddf68eef&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var tom = await collection.Find(x =&amp;gt; x.Id == ObjectId.Parse(&amp;quot;550c4aa98e59471bddf68eef&amp;quot;)).SingleAsync();
tom.Name = &amp;quot;Thomas&amp;quot;;
tom.Age = 43;
tom.Profession = &amp;quot;Hacker&amp;quot;;
var result = await collection.ReplaceOneAsync(x =&amp;gt; x.Id == tom.Id, tom);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Identifiers in MongoDB are immutable, so you can&amp;rsquo;t replace a document with another one where the identifier is different.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;deleting:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Deleting&lt;/h3&gt;

&lt;p&gt;Finally, to delete Tom, we can do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = await collection.DeleteOne(x =&amp;gt; x.Id == tom.Id);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Driver</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/</guid>
      <description>

&lt;h2 id=&#34;driver-reference:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Driver Reference&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Bson</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/</guid>
      <description>

&lt;h2 id=&#34;bson-reference:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Bson Reference&lt;/h2&gt;

&lt;p&gt;The MongoDB.Bson library handles the &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON format&lt;/a&gt; as well as serialization to and from .NET types.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/mongo-csharp-driver/2.0/reference/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/</guid>
      <description>

&lt;h2 id=&#34;reference-page-index:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Reference Page index&lt;/h2&gt;

&lt;p&gt;The reference documentation is not an API reference. You can review those &lt;a href=&#34;http://api.mongodb.org/csharp/2.0.0/&#34;&gt;here&lt;/a&gt;. Instead, the reference documentation will focus on high-level documentation and use-cases.&lt;/p&gt;

&lt;p&gt;TODO: Table of Contents&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Driver Core</title>
      <link>/mongo-csharp-driver/2.0/reference/driver_core/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver_core/</guid>
      <description>

&lt;h2 id=&#34;driver-core-reference:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Driver Core Reference&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Upgrading</title>
      <link>/mongo-csharp-driver/2.0/upgrading/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/upgrading/</guid>
      <description>

&lt;h2 id=&#34;upgrading:104d6ec20d3c9fec84381edf43ec4f2f&#34;&gt;Upgrading&lt;/h2&gt;

&lt;p&gt;As 2.0 is a major revision, there are some breaking changes when coming from the 1.x assemblies. We&amp;rsquo;ve tried our best to mitigate those breaking changes, but some were inevitable. These changes may not affect everyone, but take a moment to review the list of known changes below:&lt;/p&gt;

&lt;h3 id=&#34;system-requirements:104d6ec20d3c9fec84381edf43ec4f2f&#34;&gt;System Requirements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;.NET 3.5 and .NET 4.0 are no longer supported. If you still must use these platforms, the 1.x series of the driver will continue to be developed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP-952&#34;&gt;CSHARP-952&lt;/a&gt;: We&amp;rsquo;ve removed support for partially trusted callers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;packaging:104d6ec20d3c9fec84381edf43ec4f2f&#34;&gt;Packaging&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The nuget package &lt;code&gt;mongocsharpdriver&lt;/code&gt; now includes the legacy driver. It depends on 3 new nuget packages, &lt;code&gt;MongoDB.Bson&lt;/code&gt;, &lt;code&gt;MongoDB.Driver.Core&lt;/code&gt;, and &lt;code&gt;MongoDB.Driver&lt;/code&gt;. &lt;code&gt;MongoDB.Driver&lt;/code&gt; is the replacement for &lt;code&gt;mongocsharpdriver&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP-616&#34;&gt;CSHARP-616&lt;/a&gt;: We are no longer strong naming  our assemblies. Our previous strong naming was signed with a key in our public repository. This did nothing other than satisfy certain tools. If you need MongoDB assemblies to be strongly named, it is relatively straight-forward to build the assemblies yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bson:104d6ec20d3c9fec84381edf43ec4f2f&#34;&gt;Bson&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP-933&#34;&gt;CSHARP-933&lt;/a&gt;: Improved the Bson Serializer infrastructure. Anyone who has written a custom serializer will be affected by this. The changes are minor, but were necessary to support dynamic serializers as well as offering great speed improvements and improved memory management.&lt;/li&gt;
&lt;li&gt;Certain methods, such as &lt;code&gt;BsonMemberMap.SetRepresentation&lt;/code&gt; have been removed. The proper way to set a representation, for instance, would be to use &lt;code&gt;SetSerializer&lt;/code&gt; and configure the serializer with the appropriate representation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP-939&#34;&gt;CSHARP-939&lt;/a&gt;: Dynamic DictionaryRepresentation has been removed. Its intent was to store, in some manner, anything in a .NET dictionary. In practice, this leads to the same values getting stored in different ways depending on factors such as a &amp;ldquo;.&amp;rdquo; inside the key name. We made the decision to eliminate this variability. This means that documents that used to serialize correctly may start throwing a BsonSerializationException with a message indicating the key must be a valid string. &lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP-1165&#34;&gt;CSHARP-1165&lt;/a&gt; has a solution to this problem. It should be noted that we will continue to read these disparate representations without error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;driver:104d6ec20d3c9fec84381edf43ec4f2f&#34;&gt;Driver&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP-979&#34;&gt;CSHARP-979&lt;/a&gt;: &lt;code&gt;MongoConnectionStringBuilder&lt;/code&gt; has been removed. Use the documented mongodb connection string format and/or &lt;code&gt;MongoUrlBuilder&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MongoServer&lt;/code&gt; is a deprecated class. Anyone using &lt;code&gt;MongoClient.GetServer()&lt;/code&gt; will encounter a deprecation warning and, depending on how your build is setup, may receive an error. It is still safe to use this API until your code is ported to the new API. *Note that this API requires the use of the &lt;code&gt;mongocsharpdriver package&lt;/code&gt; which includes the legacy API.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP-1043&#34;&gt;CSHARP-1043&lt;/a&gt; and &lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP-1044&#34;&gt;CSHARP-1044&lt;/a&gt;: &lt;code&gt;ReadPreference&lt;/code&gt; and &lt;code&gt;WriteConcern&lt;/code&gt; were rewritten. These classes are now immutable. Any current application code that sets values on these classes will no longer function. Instead, you should use the With method to alter a &lt;code&gt;ReadPreference&lt;/code&gt; or &lt;code&gt;WriteConcern&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var writeConcern = myCurrentWriteConcern.With(journal: true);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s New</title>
      <link>/mongo-csharp-driver/2.0/what_is_new/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/what_is_new/</guid>
      <description>

&lt;h2 id=&#34;what-s-new-in-the-mongodb-net-2-0-driver:71c6d1c01fe32fb79a0d47df585677ca&#34;&gt;What&amp;rsquo;s New in the MongoDB .NET 2.0 Driver&lt;/h2&gt;

&lt;p&gt;The 2.0 driver ships with a host of new features.&lt;/p&gt;

&lt;h3 id=&#34;async:71c6d1c01fe32fb79a0d47df585677ca&#34;&gt;Async&lt;/h3&gt;

&lt;p&gt;As has been requested for a while now, the driver now offers a full async stack. Since it uses Tasks, it is fully usable
with async and await.&lt;/p&gt;

&lt;p&gt;While we offer a mostly backwards-compatible sync API, it is calling into the async stack underneath. Until you are ready
to move to async, you should measure against the 1.x versions to ensure performance regressions don&amp;rsquo;t enter your codebase.&lt;/p&gt;

&lt;p&gt;All new applications should utilize the New API.&lt;/p&gt;

&lt;h3 id=&#34;new-api:71c6d1c01fe32fb79a0d47df585677ca&#34;&gt;New Api&lt;/h3&gt;

&lt;p&gt;Because of our async nature, we have rebuilt our entire API. The new API is accessible via MongoClient.GetDatabase.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interfaces are used (&lt;code&gt;IMongoClient&lt;/code&gt;, &lt;code&gt;IMongoDatabase&lt;/code&gt;, &lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt; to support easier testing.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A fluent Find API is available with full support for expression trees including projections.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var names = await db.GetCollection&amp;lt;Person&amp;gt;(&amp;quot;people&amp;quot;)
    .Find(x =&amp;gt; x.FirstName == &amp;quot;Jack&amp;quot;)
    .SortBy(x =&amp;gt; x.Age)
    .Project(x =&amp;gt; x.FirstName + &amp;quot; &amp;quot; + x.LastName)
    .ToListAsync();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A fluent Aggregation API is available with mostly-full support for expression trees (Unwind is special).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var totalAgeByLastName = await db.GetCollection&amp;lt;Person&amp;gt;(&amp;quot;people&amp;quot;)
    .Aggregate()
    .Match(x =&amp;gt; x.FirstName == &amp;quot;Jack&amp;quot;)
    .GroupBy(x =&amp;gt; x.LastName, g =&amp;gt; new { _id = g.Key, TotalAge = g.Sum(x =&amp;gt; x.Age)})
    .ToListAsync();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Support for dynamic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var person = new ExpandoObject();
person.FirstName = &amp;quot;Jane&amp;quot;;
person.Age = 12;
person.PetNames = new List&amp;lt;dynamic&amp;gt; { &amp;quot;Sherlock&amp;quot;, &amp;quot;Watson&amp;quot; }
await db.GetCollection&amp;lt;dynamic&amp;gt;(&amp;quot;people&amp;quot;).InsertOneAsync(person);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;experimental-features:71c6d1c01fe32fb79a0d47df585677ca&#34;&gt;Experimental Features&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve also include some experimental features which are subject to change. These are both based on the Listener API&lt;/p&gt;

&lt;h4 id=&#34;logging:71c6d1c01fe32fb79a0d47df585677ca&#34;&gt;Logging&lt;/h4&gt;

&lt;p&gt;It is possible to see what is going on deep down in the driver by listening to core events. We&amp;rsquo;ve included a simple text logger as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var settings = new MongoClientSettings
{
	ClusterConfigurator = cb =&amp;gt;
	{
		var textWriter = TextWriter.Synchronized(new StreamWriter(&amp;quot;mylogfile.txt&amp;quot;));
		cb.AddListener(new LogListener(textWriter));
	}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;performance-counters:71c6d1c01fe32fb79a0d47df585677ca&#34;&gt;Performance Counters&lt;/h4&gt;

&lt;p&gt;Windows Performance Counters can be enabled to track statistics like average message size, number of connections in the pool, etc&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var settings = new MongoClientSettings
{
	ClusterConfigurator = cb =&amp;gt;
	{
		cb.UsePeformanceCounters(&amp;quot;MyApplicationName&amp;quot;);
	}
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/authentication/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/authentication/</guid>
      <description>

&lt;h2 id=&#34;authentication:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;The .NET driver supports all &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/&#34;&gt;MongoDB authentication mechanisms&lt;/a&gt; including those in the &lt;a href=&#34;http://docs.mongodb.org/manual/administration/install-enterprise/&#34;&gt;Enterprise Edition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Authentication credentials are created by the application as instances of &lt;code&gt;MongoCredential&lt;/code&gt; which includes static factory methods for each of the supported authentication mechanisms. A list of these instances must be passed to the driver using the &lt;code&gt;MongoClient&lt;/code&gt; constructor that takes a &lt;code&gt;MongoClientSettings&lt;/code&gt;. When only one credential is necessary, it is possible to specify via the &lt;a href=&#34;TODO&#34;&gt;connection string&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;default:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;Default&lt;/h3&gt;

&lt;p&gt;MongoDB 3.0 changed the default authentication mechanism from &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#mongodb-cr-authentication&#34;&gt;MONGODB-CR&lt;/a&gt; to &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;. To create a credential that will authenticate properly regardless of server version, create a credential using the following static factory method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreateCredential(databaseName, username, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username:password@myserver/databaseName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the recommended approach as it will make upgrading from MongoDB 2.6 to MongoDB 3.0 seamless, even after &lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/3.0-scram/#upgrade-mongodb-cr-to-scram&#34;&gt;upgrading the authentication schema&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;x-509-authentication:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;x.509 Authentication&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#x-509-certificate-authentication&#34;&gt;x.509&lt;/a&gt; mechanism authenticates a user whose name is derived from the distinguished subject name of the x.509 certificate presented by the driver during SSL negotiation. This authentication method requires the use of SSL connections with certificate validation and is available in MongoDB 2.6 and newer. To create a credential of this type use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreateX509Credential(username);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username@myserver/?authMechanism=MONGODB-X509
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even when using the connection string to provide the credential, the certificate must still be provided via code. This certificate can be pulled out of the trust stores on the box, or from a file. However, to be used with client authentication, the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate&#34;&gt;X509Certificate&lt;/a&gt; provided to the driver must contain the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2.privatekey(v=vs.110&#34;&gt;PrivateKey&lt;/a&gt;.aspx).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cert = new X509Certificate2(&amp;quot;client.pfx&amp;quot;, &amp;quot;mySuperSecretPassword&amp;quot;);

var settings = new MongoClientSettings
{
    Credentials = new[] 
    {
        MongoCredential.CreateMongoX509Credential(&amp;quot;CN=client,OU=user,O=organization,L=Some City,ST=Some State,C=Some Country&amp;quot;)
    },
    SslSettings = new SslSettings
    {
        ClientCertificates = new[] { cert },
    },
    UseSsl = true
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gssapi-kerberos:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;GSSAPI/Kerberos&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports authentication using &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#kerberos-authentication&#34;&gt;Kerberos/GSSAPI&lt;/a&gt;. To create a Kerberos/GSSAPI credential, use the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreateGssapiCredential(username, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com:password@myserver/?authMechanism=GSSAPI
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the username will need to have a REALM associated with it. When used in a connection string, &lt;code&gt;%40&lt;/code&gt; is the escape character for the &lt;code&gt;@&lt;/code&gt; symbol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the process owner running your application is the same as the user needing authentication, you can omit the password:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreateGssapiCredential(username);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com@myserver/?authMechanism=GSSAPI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on the kerberos setup, it may be required to specify some additional properties. These may be specified in the connection string or via code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CANONICALIZE_HOST_NAME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uses the DNS server to retrieve the fully qualified domain name (FQDN) of the host.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;credential = credential.WithMechanismProperty(&amp;quot;CANONICALIZE_HOST_NAME&amp;quot;, &amp;quot;true&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=CANONICALIZE_HOSTNAME:true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;REALM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is used when the user&amp;rsquo;s realm is different from the service&amp;rsquo;s realm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;credential = credential.WithMechanismProperty(&amp;quot;REALM&amp;quot;, &amp;quot;otherrealm&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=REALM:otherrealm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SERVICE_NAME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is used when the service&amp;rsquo;s name is different that the default &lt;code&gt;mongodb&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;credential = credential.WithMechanismProperty(&amp;quot;SERVICE_NAME&amp;quot;, &amp;quot;othername&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=SERVICE_NAME:othername
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, it is possible to use multiple authentication mechanism properties either via code or in the connection string. In code, call &lt;code&gt;WithMechanismProperty&lt;/code&gt; multiple times. In the connection string, separate the entries with a &lt;code&gt;,&lt;/code&gt; (comma).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=SERVICE_NAME:othername,REALM:otherrealm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ldap-plain:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;LDAP (PLAIN)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Lightweight Directory Access Protocol (LDAP) service. To create a credential of type LDAP use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreatePlainCredential(&amp;quot;$external&amp;quot;, username, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username:password@myserver/?authSource=$external&amp;amp;authMechanism=PLAIN
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the method refers to the plain authentication mechanism instead of LDAP because technically the driver is authenticating via the PLAIN SASL mechanism. This means that your credentials are in plain text on the wire. Therefore, PLAIN should only be used in conjunction with SSL.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>index</title>
      <link>/mongo-csharp-driver/2.0/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/</guid>
      <description>

&lt;h2 id=&#34;welcome-to-the-net-mongodb-reference-documentation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Welcome to the .NET MongoDB Reference Documentation&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>